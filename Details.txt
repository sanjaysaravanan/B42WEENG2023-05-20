
1. Node JS npm project, so we can install external packages
    1. Create a project for the backend
    2. npm install <package-name>

Request:
    Request is an object with pre-defined key<->value pairs & methods/functions
    used to operate on top of the request in-coming

Response:
    response is an object with pre-defined key<->value pairs & methods
    used to operate on top of the response out-going

2. Nodemon
    Reads the filesystem changes and restart the server automatically

    development dependency -> dependency used only for development 
    i.e: Developer will use these for developing the app
    npm install --save-dev/-D nodemon

    dependency: direct package involvement in codes

    scripts: 
        access the node_modules wit simple npm command line arguments

3. APIs using express -
    why express external module:
        basic server creation is possible in normal nodejs that involves lot of code with lots of built-in packages
    
        Express combines everything and puts together in simple terms

    web framework http server applcation which lets us create APIs
    and use those APIs in our application
    sample API using express

4. CRUD Operations with APIs
   CREATE, READ, UPDATE, DELETE

5. URL Params:
    Path Params: /:id/name

        id or name is the path variable/param
      request.params
    
    Query Params:
      request.query

6. ES module, Common Js

    ES Module - new import, export
    CommonJS - older require, module.exports syntax

    reference: https://blog.logrocket.com/commonjs-vs-es-modules-node-js/

7. Request:
    Request is an object with pre-defined key<->value pairs & methods/functions
    used to operate on top of the request in-coming

    Eg: request.body gives the payload, req.params['<param-name>'] gives the path param

    reference: https://www.tutorialspoint.com/nodejs/nodejs_request_object.htm

8. Resposne:
    response is an object with pre-defined key<->value pairs & methods
    used to operate on top of the response out-going

    reference: https://www.tutorialspoint.com/nodejs/nodejs_response_object.htm


Next Session:
    9. Post-Man: deepdive
      1. Grouping Collection
      2. All Methods are supported
      3. Automatic Documentation for the Collection
      4. Ease of sharing the APIs across developer by expoting the collection
      5. Testing for API can also be Done
    10. Deploying Nodes Js Application



Future Discussions:
    1. TDD --> Test Driven Development, Assertion
